[Pseudocode]
Question: Making Anagrams
Level: easy
Author: amititkgp
Solution: apexDev37


        1)  Optimization Technique

            - Check if s1 and s2 have the same characters with the same frequencies.
            - If both strings are anagrams, return 0.

        2)  Truncate Non-common Characters

            Referred to as the "symmetric difference" of sets. This is the set of chars that are 
            present in any one of the strings, but not present in both.

            annotation: A Δ B = (A ∪ B) - (A ∩ B)

            - Compute the "symmetric difference" of sets.
            - Truncate the uncommon chars (symmetric difference) in s1 and s2.
        
        3)  Optimization Technique

            - Check if truncated (s1 and s2) have the same characters with the same frequencies.
            - If both strings are anagrams, compute the difference between the truncated and original strings.
            - Return the difference as the number of deletions required to make anagrams.

        3)  Compute Intersection (Common Chars)
            
            Referred to as the 'intersection' of sets. This is the set of characters that are 
            present in both strings, indicating the common elements shared between them.

            annotation: A ∩ B

            - Return a 
            Get the set of characters that exist in both the s1 and s2.
            (info) In terms of conceptual Venn diagrams, this would be
            represented as an intersection of the elements (characters)
            shared between s1 and s2.

        4)  Truncate the "symmetric difference" of sets. This is the set
            of chars that are present in any one of the strings, but not
            present in both. If two strings have unequal length, truncate
            both to be of equal length.

            annotation: A Δ B = (A ∪ B) - (A ∩ B) 

        5)  Given a string, count and map the frequency of each unique 
            char in the string in a grouped and logical format.

                [Example]

                    given: str = 'anagram'
                    result: Any = [
                        'a' = frequency(3),
                        'n' = frequency(1),
                        'g' = frequency(1),
                        'r' = frequency(1),
                        'm' = frequency(1),
                    ] 
        
        6)  Get the difference for each corresponding char in both 
            s1 and s2. Sum the total difference of each char frequency
            for both s1 and s2.

                [Example]

                    s1 = 'bacdc' 
                    s2 = 'badcd'

                    result = [
                        'b': 1 - 1,
                        'a': 1 - 1,
                        'c': 2 - 1,
                        'c': 1 - 2,
                    ] 
